{
  "_args": [
    [
      {
        "raw": "react-native-swipe-cards@^0.1.1",
        "scope": null,
        "escapedName": "react-native-swipe-cards",
        "name": "react-native-swipe-cards",
        "rawSpec": "^0.1.1",
        "spec": ">=0.1.1 <0.2.0",
        "type": "range"
      },
      "/Users/Melissa/Desktop/201FP/ProjectNetwerk"
    ]
  ],
  "_from": "react-native-swipe-cards@>=0.1.1 <0.2.0",
  "_id": "react-native-swipe-cards@0.1.1",
  "_inCache": true,
  "_location": "/react-native-swipe-cards",
  "_nodeVersion": "6.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-swipe-cards-0.1.1.tgz_1508588090039_0.014142525615170598"
  },
  "_npmUser": {
    "name": "yogiben",
    "email": "ben@meteorfactory.io"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-swipe-cards@^0.1.1",
    "scope": null,
    "escapedName": "react-native-swipe-cards",
    "name": "react-native-swipe-cards",
    "rawSpec": "^0.1.1",
    "spec": ">=0.1.1 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-swipe-cards/-/react-native-swipe-cards-0.1.1.tgz",
  "_shasum": "25a31b450f2616f3a25a101c9fc37ccbb2deb3e2",
  "_shrinkwrap": null,
  "_spec": "react-native-swipe-cards@^0.1.1",
  "_where": "/Users/Melissa/Desktop/201FP/ProjectNetwerk",
  "author": {
    "name": "meteor-factory"
  },
  "bugs": {
    "url": "https://github.com/meteor-factory/react-native-tinder-swipe-cards/issues"
  },
  "dependencies": {
    "clamp": "^1.0.1",
    "prop-types": "^15.6.0"
  },
  "description": "Swipe cards for stylishly passing & failing a card",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "25a31b450f2616f3a25a101c9fc37ccbb2deb3e2",
    "tarball": "https://registry.npmjs.org/react-native-swipe-cards/-/react-native-swipe-cards-0.1.1.tgz"
  },
  "gitHead": "0d239ec5ec1156f1aef5c00136dbfee13ff35c0d",
  "homepage": "https://github.com/meteor-factory/react-native-tinder-swipe-cards#readme",
  "keywords": [
    "react-native",
    "tinder",
    "cards",
    "swipe"
  ],
  "license": "MIT",
  "main": "SwipeCards.js",
  "maintainers": [
    {
      "name": "yogiben",
      "email": "ben@meteorfactory.io"
    }
  ],
  "name": "react-native-swipe-cards",
  "optionalDependencies": {},
  "readme": "# Swipe Cards for React Native\n\nA [package](https://www.npmjs.com/package/react-native-swipe-cards) based on [@brentvatne](https://github.com/brentvatne/)'s awesome [example](https://github.com/brentvatne/react-native-animated-demo-tinder).\n\n\n![React Native Swipe Cards](https://github.com/meteor-factory/react-native-tinder-swipe-cards/raw/master/screenshots/swiper-cards.gif\n)\n\n## Quick Start\n1. `npm install --save react-native-swipe-cards`\n2. Create a module e.g. `SwipeCards.js`\n3. Import it `import SwipeCards from './SwipeCards.js'`\n4. Render it `<SwipeCards style={{flex: 1}} />`\n\n```javascript\n// SwipeCards.js\n'use strict';\n\nimport React, { Component } from 'react';\nimport {StyleSheet, Text, View, Image} from 'react-native';\n\nimport SwipeCards from 'react-native-swipe-cards';\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View style={[styles.card, {backgroundColor: this.props.backgroundColor}]}>\n        <Text>{this.props.text}</Text>\n      </View>\n    )\n  }\n}\n\nclass NoMoreCards extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View>\n        <Text style={styles.noMoreCardsText}>No more cards</Text>\n      </View>\n    )\n  }\n}\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [\n        {text: 'Tomato', backgroundColor: 'red'},\n        {text: 'Aubergine', backgroundColor: 'purple'},\n        {text: 'Courgette', backgroundColor: 'green'},\n        {text: 'Blueberry', backgroundColor: 'blue'},\n        {text: 'Umm...', backgroundColor: 'cyan'},\n        {text: 'orange', backgroundColor: 'orange'},\n      ]\n    };\n  }\n\n  handleYup (card) {\n    console.log(`Yup for ${card.text}`)\n  }\n  handleNope (card) {\n    console.log(`Nope for ${card.text}`)\n  }\n  handleMaybe (card) {\n    console.log(`Maybe for ${card.text}`)\n  }\n  render() {\n    // If you want a stack of cards instead of one-per-one view, activate stack mode\n    // stack={true}\n    return (\n      <SwipeCards\n        cards={this.state.cards}\n        renderCard={(cardData) => <Card {...cardData} />}\n        renderNoMoreCards={() => <NoMoreCards />}\n\n        handleYup={this.handleYup}\n        handleNope={this.handleNope}\n        handleMaybe={this.handleMaybe}\n        hasMaybeAction\n      />\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 300,\n    height: 300,\n  },\n  noMoreCardsText: {\n    fontSize: 22,\n  }\n})\n```\n\n### More complex example\n```javascript\n'use strict';\n\nimport React from 'react';\nimport {StyleSheet, Text, View, Image} from 'react-native';\n\nimport SwipeCards from 'react-native-swipe-cards';\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View style={styles.card}>\n        <Image style={styles.thumbnail} source={{uri: this.props.image}} />\n        <Text style={styles.text}>This is card {this.props.name}</Text>\n      </View>\n    )\n  }\n}\n\nclass NoMoreCards extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View style={styles.noMoreCards}>\n        <Text>No more cards</Text>\n      </View>\n    )\n  }\n}\n\nconst cards = [\n  {name: '1', image: 'https://media.giphy.com/media/GfXFVHUzjlbOg/giphy.gif'},\n  {name: '2', image: 'https://media.giphy.com/media/irTuv1L1T34TC/giphy.gif'},\n  {name: '3', image: 'https://media.giphy.com/media/LkLL0HJerdXMI/giphy.gif'},\n  {name: '4', image: 'https://media.giphy.com/media/fFBmUMzFL5zRS/giphy.gif'},\n  {name: '5', image: 'https://media.giphy.com/media/oDLDbBgf0dkis/giphy.gif'},\n  {name: '6', image: 'https://media.giphy.com/media/7r4g8V2UkBUcw/giphy.gif'},\n  {name: '7', image: 'https://media.giphy.com/media/K6Q7ZCdLy8pCE/giphy.gif'},\n  {name: '8', image: 'https://media.giphy.com/media/hEwST9KM0UGti/giphy.gif'},\n  {name: '9', image: 'https://media.giphy.com/media/3oEduJbDtIuA2VrtS0/giphy.gif'},\n]\n\nconst cards2 = [\n  {name: '10', image: 'https://media.giphy.com/media/12b3E4U9aSndxC/giphy.gif'},\n  {name: '11', image: 'https://media4.giphy.com/media/6csVEPEmHWhWg/200.gif'},\n  {name: '12', image: 'https://media4.giphy.com/media/AA69fOAMCPa4o/200.gif'},\n  {name: '13', image: 'https://media.giphy.com/media/OVHFny0I7njuU/giphy.gif'},\n]\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: cards,\n      outOfCards: false\n    }\n  }\n\n  handleYup (card) {\n    console.log(\"yup\")\n  }\n\n  handleNope (card) {\n    console.log(\"nope\")\n  }\n\n  cardRemoved (index) {\n    console.log(`The index is ${index}`);\n\n    let CARD_REFRESH_LIMIT = 3\n\n    if (this.state.cards.length - index <= CARD_REFRESH_LIMIT + 1) {\n      console.log(`There are only ${this.state.cards.length - index - 1} cards left.`);\n\n      if (!this.state.outOfCards) {\n        console.log(`Adding ${cards2.length} more cards`)\n\n        this.setState({\n          cards: this.state.cards.concat(cards2),\n          outOfCards: true\n        })\n      }\n\n    }\n\n  }\n\n  render() {\n    return (\n      <SwipeCards\n        cards={this.state.cards}\n        loop={false}\n\n        renderCard={(cardData) => <Card {...cardData} />}\n        renderNoMoreCards={() => <NoMoreCards />}\n        showYup={true}\n        showNope={true}\n\n        handleYup={this.handleYup}\n        handleNope={this.handleNope}\n        cardRemoved={this.cardRemoved.bind(this)}\n      />\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignItems: 'center',\n    borderRadius: 5,\n    overflow: 'hidden',\n    borderColor: 'grey',\n    backgroundColor: 'white',\n    borderWidth: 1,\n    elevation: 1,\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n  },\n  text: {\n    fontSize: 20,\n    paddingTop: 10,\n    paddingBottom: 10\n  },\n  noMoreCards: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  }\n})\n```\n\n### Props\n| Props name        | Type     | Description                                                 | Default      |\n|-------------------|----------|-------------------------------------------------------------|--------------|\n| cards*            | Array    | Data that will be provided as props for the cards           |              |\n| renderCard*       | Function | Renders the card with the current data                      |              |\n| loop              | Boolean  | If true, start again when run out of cards                  | `false`      |\n| onLoop            | Function | Called when card list returns to the beginning              |              |\n| renderNoMoreCards | Function | Renders what is shown after swiped last card                |              |\n| showYup           | Boolean  | Shows the 'Yup' component                                   | `true`       |\n| showNope          | Boolean  | Shows the 'Nope'                                            | `true`       |\n| showMaybe         | Boolean  | Shows the 'Maybe'                                           | `true`       |\n| hasMaybeAction    | Boolean  | Includes the possibility to swipe up and its components     | `false`      |\n| renderYup         | Function | Renders Yup                                                 |              |\n| renderNope        | Function | Renders Nope                                                |              |\n| renderMaybe       | Function | Renders Maybe                                               |              |\n| handleYup         | Function | Called when card is 'passed' with that card's data          |              |\n| handleNope        | Function | Called when card is 'rejected' with that card's data        |              |\n| containerStyle    | style    | Override default style                                      |              |\n| yupStyle          | style    | Override default style                                      |              |\n| yupTextStyle      | style    | Override default style                                      |              |\n| nopeStyle         | style    | Override default style                                      |              |\n| nopeTextStyle     | style    | Override default style                                      |              |\n| maybeStyle        | style    | Override default style                                      |              |\n| maybeTextStyle    | style    | Override default style                                      |              |\n| yupView           | element  | React component to render on a Yes vote                     |              |\n| yupText           | string   | Text to render on Yes vote                                  | `Yep`        |\n| noView            | element  | React component to render on a No vote                      |              |\n| noText            | string   | Text to render on No vote                                   | `Nope`       |\n| maybeView         | element  | React component to render on a Maybe vote                   |              |\n| maybeText         | string   | Text to render on Maybe vote                                | `Maybe`      |\n| smoothTransition  | Boolean  | Disables a slow transition fading the current card out      | `false`      |\n| cardKey           | String   | React key to be used to for each card                       |              |\n| dragY             | Boolean  | Allows dragging cards vertically                            | `true`       |\n| stack             | Boolean  | Enables the stack mode                                      | `false`      |\n| stackOffsetX      | Number   | Horizontal offset between cards in stack                    | 25           |\n| stackOffsetY      | Number   | Vertical offset between cards in stack                      | 0            |\n| cardRemoved       | Function | A callback passing the card reference that just got removed |              |\n| onClickHandler    | Function | A callback clicking the card                                 | alert('tap') |\n\n\n\n\n*required\n\n### Todo (PRs welcome!)\n- [ ] Show next card underneath current card\n- [ ] Shadow when card is being dragged\n- [ ] Example with backend\n- [ ] Example with polaroids\n- [ ] Submit to repos\n- [x] renderYup\n- [x] renderNope\n- [ ] Testing\n- [ ] Add more args to `cardRemoved`?\n- [ ] `class extends` all components\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/meteor-factory/react-native-tinder-swipe-cards.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.1"
}
